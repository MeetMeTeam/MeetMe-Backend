basePath: /api
definitions:
  interfaces.AvatarRequest:
    properties:
      assets:
        items:
          type: string
        type: array
      name:
        type: string
      preview:
        type: string
      price:
        type: integer
      type:
        type: string
    required:
    - assets
    - name
    - preview
    - price
    type: object
  interfaces.EditUserRequest:
    properties:
      displayName:
        type: string
      username:
        type: string
    type: object
  interfaces.Email:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  interfaces.InviteRequest:
    properties:
      targetMailAddress:
        example: winner@mail.com
        type: string
    type: object
  interfaces.Login:
    properties:
      email:
        example: winner@mail.com
        type: string
      password:
        example: winner
        type: string
    required:
    - email
    - password
    type: object
  interfaces.Password:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  interfaces.RegisterRequest:
    properties:
      birthday:
        example: "2023-08-12"
        type: string
      characterId:
        type: string
      displayName:
        example: winnerkypt
        type: string
      email:
        example: winner@mail.com
        type: string
      isAdmin:
        type: boolean
      password:
        example: winner
        type: string
      username:
        example: winnerkypt
        type: string
    required:
    - characterId
    - email
    - password
    type: object
  interfaces.ThemeCreateRequest:
    properties:
      assets:
        type: string
      name:
        type: string
      price:
        type: integer
      song:
        type: string
    required:
    - assets
    - name
    - price
    type: object
  utils.DataResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a API for Meet Me.
  title: Meet Me API
  version: "1.0"
paths:
  /avatars:
    get:
      consumes:
      - application/json
      description: Get avatar's shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Get avatar's shop.
      tags:
      - avatar shop
    post:
      consumes:
      - application/json
      description: Only admin qdd avatar to shop.
      parameters:
      - description: request body for adding avatar to shop
        in: body
        name: avatars
        required: true
        schema:
          $ref: '#/definitions/interfaces.AvatarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Add avatar to shop
      tags:
      - avatar shop
  /friends:
    get:
      consumes:
      - application/json
      description: Get Friends List.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: List Friends.
      tags:
      - friends
  /friends/{id}:
    delete:
      consumes:
      - application/json
      description: Remove Friend by Id.
      parameters:
      - description: Friend ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Remove Friend
      tags:
      - friends
  /inventories:
    get:
      consumes:
      - application/json
      description: Get inventory by token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Get user's inventory.
      tags:
      - inventories
    post:
      consumes:
      - application/json
      description: Add item to user inventories
      parameters:
      - description: item id that you want to add
        in: query
        name: item_id
        required: true
        type: string
      - description: item type that you want to add [avatar]
        in: query
        name: item_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      summary: Add item to inventories
      tags:
      - inventories
  /invitations:
    delete:
      consumes:
      - application/json
      description: Reject All Invitations.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Reject All Invitations
      tags:
      - invitations
    get:
      consumes:
      - application/json
      description: Check Invitation List.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: List Invitation.
      tags:
      - invitations
    post:
      consumes:
      - application/json
      description: Invite friend by email.
      parameters:
      - description: request body invite friend
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/interfaces.InviteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Invite Friend
      tags:
      - invitations
    put:
      consumes:
      - application/json
      description: Accept All Invitations.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Accept All Invitations
      tags:
      - invitations
  /invitations/{id}:
    delete:
      consumes:
      - application/json
      description: Reject Invitation by Id.
      parameters:
      - description: Invitation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Reject Invitation
      tags:
      - invitations
    put:
      consumes:
      - application/json
      description: Accept Invitation by Id.
      parameters:
      - description: Invitation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Accept Invitation
      tags:
      - invitations
  /login:
    post:
      consumes:
      - application/json
      description: Login user.
      parameters:
      - description: request body login
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/interfaces.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      summary: Login
      tags:
      - users
  /refresh:
    post:
      consumes:
      - application/json
      description: return new access token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Refresh Token
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Create user.
      parameters:
      - description: request body register
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/interfaces.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      summary: Register user
      tags:
      - users
  /themes:
    get:
      consumes:
      - application/json
      description: Get theme's shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Get theme's shop.
      tags:
      - theme shop
    post:
      consumes:
      - application/json
      description: Only admin add theme to shop.
      parameters:
      - description: request body for adding theme to shop
        in: body
        name: avatars
        required: true
        schema:
          $ref: '#/definitions/interfaces.ThemeCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Add theme to shop
      tags:
      - theme shop
  /users:
    get:
      consumes:
      - application/json
      description: return list users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: User change profile information.
      parameters:
      - description: request body for editing user's profile
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/interfaces.EditUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Edit profile.
      tags:
      - users
  /users/avatars/{id}:
    get:
      consumes:
      - application/json
      description: Get avatar by user Id.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Get Avatar.
      tags:
      - users
    put:
      consumes:
      - application/json
      description: User change avatar.
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DataResponse'
      security:
      - BearerAuth: []
      summary: Change Avatar.
      tags:
      - users
  /users/coins:
    get:
      consumes:
      - application/json
      description: Get coin by token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Coin.
      tags:
      - users
  /users/forgot-password:
    put:
      consumes:
      - application/json
      description: Send mail to reset password.
      parameters:
      - description: request body to send mail
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/interfaces.Email'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Forgot Password
      tags:
      - users
  /users/reset-password:
    put:
      consumes:
      - application/json
      description: Change password.
      parameters:
      - description: request body to change password
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/interfaces.Password'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reset Password
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
